Problem Description
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

Problem Constraints
1 <= number of nodes <= 105

Input Format
First and only argument is the root node of the binary tree.

Output Format
Return 0 / 1 ( 0 for false, 1 for true ).

Example Input
Input 1:

    1
   / \
  2   2
 / \ / \
3  4 4  3
Input 2:

    1
   / \
  2   2
   \   \
   3    3


Example Output
Output 1:
 1
Output 2:
 0

Example Explanation
Explanation 1:
The above binary tree is symmetric. 
Explanation 2:
The above binary tree is not symmetric.



SOLUTION:
class Solution:
    # @param A : root node of tree
    # @return an integer
    def isSymmetric(self, A):
        if A is None:
            return 1
        else:
            return self.isMirror(A.left, A.right)
    
    def isMirror(self, left, right):
        if left is None and right is None:
            return 1
        elif left is None or right is None:
            return 0
        elif left.val != right.val:
            return 0
        else:
            return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)
